name: Deploy Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.2.3)'
        required: true
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: '3.x'

jobs:
  deploy_production:
    name: Deploy Production Build
    runs-on: macos-latest
    environment: prod
    steps:
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - uses: actions/checkout@v4
      
      - name: Setup OnePub
        env:
          ONEPUB_TOKEN: ${{ secrets.ONEPUB_TOKEN }}
        run: |
          echo "Setting up OnePub..."
          mkdir -p $PUB_CACHE/credentials
          dart pub global activate onepub
          dart pub global run onepub import
          echo "Verifying OnePub setup..."
          ls -la $PUB_CACHE/credentials/ || echo "Failed to list credentials directory"
          cat $PUB_CACHE/credentials/credentials.json || echo "Failed to read credentials file"
          echo '{
            "https://onepub.dev/api/kdpxxpsdav/": {
              "token": "${{ secrets.ONEPUB_TOKEN }}"
            }
          }' > $PUB_CACHE/credentials/credentials.json

      - name: Create .prod.env file
        run: echo "${{ secrets.PROD_ENV }}" > .prod.env

      - name: Install dependencies
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: flutter pub get
          retry_wait_seconds: 10

      - name: Generate icons
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: flutter pub run huge_icons:generate
          retry_wait_seconds: 10

      - name: Generate code
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter pub run pigeon --input pigeon_conf.dart

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 'head'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Setup Keychain
        env:
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
          TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }}
        run: fastlane setup_keychain

      - name: Create Apple API Key JSON
        run: echo "$APPLE_API_KEY_JSON" > fastlane/apple_api_key.json
        env:
          APPLE_API_KEY_JSON: ${{ secrets.APPLE_API_KEY_JSON }}
        working-directory: ios

      - name: Deploy iOS Production
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_TOKEN: ${{ secrets.MATCH_GIT_TOKEN }}
          MEDITO_APPSTORE_CERTIFICATES_REPO: ${{ secrets.MEDITO_APPSTORE_CERTIFICATES_REPO }}
          APP_STORE_CONNECT_TEAM_ID: ${{ secrets.APP_STORE_CONNECT_TEAM_ID }}
          DEVELOPER_APP_ID: ${{ secrets.DEVELOPER_APP_ID }}
          DEVELOPER_APP_IDENTIFIER: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}
          DEVELOPER_PORTAL_TEAM_ID: ${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}
          FASTLANE_APPLE_ID: ${{ secrets.FASTLANE_APPLE_ID }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          echo "$GOOGLE_SERVICE_INFO_PLIST" > ios/Runner/GoogleService-Info.plist
          echo "$FIREBASE_OPTIONS_DART" > lib/firebase_options.dart
          fastlane ios release
        working-directory: ios

      - name: Deploy Android Production
        env:
          FCI_KEYSTORE_PASSWORD: ${{ secrets.FCI_KEYSTORE_PASSWORD }}
          FCI_KEY_ALIAS: ${{ secrets.FCI_KEY_ALIAS }}
          FCI_KEY_PASSWORD: ${{ secrets.FCI_KEY_PASSWORD }}
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
          fastlane android release
        working-directory: android

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            build/ios/ipa/*.ipa
            build/app/outputs/bundle/release/*.aab